# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pykondo', [dirname(__file__)])
        except ImportError:
            import _pykondo
            return _pykondo
        if fp is not None:
            try:
                _mod = imp.load_module('_pykondo', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pykondo = swig_import_helper()
    del swig_import_helper
else:
    import _pykondo
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



_pykondo.RCB4_SECOND_swigconstant(_pykondo)
RCB4_SECOND = _pykondo.RCB4_SECOND

_pykondo.RCB4_15MS_swigconstant(_pykondo)
RCB4_15MS = _pykondo.RCB4_15MS

_pykondo.RCB4_50MS_swigconstant(_pykondo)
RCB4_50MS = _pykondo.RCB4_50MS

_pykondo.RCB4_USB_VID_swigconstant(_pykondo)
RCB4_USB_VID = _pykondo.RCB4_USB_VID

_pykondo.RCB4_USB_PID_swigconstant(_pykondo)
RCB4_USB_PID = _pykondo.RCB4_USB_PID

_pykondo.RCB4_BAUD_swigconstant(_pykondo)
RCB4_BAUD = _pykondo.RCB4_BAUD

_pykondo.RCB4_SWAP_SIZE_swigconstant(_pykondo)
RCB4_SWAP_SIZE = _pykondo.RCB4_SWAP_SIZE

_pykondo.RCB4_RX_TIMEOUT_swigconstant(_pykondo)
RCB4_RX_TIMEOUT = _pykondo.RCB4_RX_TIMEOUT

_pykondo.RCB4_ACK_BYTE_swigconstant(_pykondo)
RCB4_ACK_BYTE = _pykondo.RCB4_ACK_BYTE

_pykondo.RCB4_NCK_BYTE_swigconstant(_pykondo)
RCB4_NCK_BYTE = _pykondo.RCB4_NCK_BYTE

_pykondo.RCB4_CMD_ACK_swigconstant(_pykondo)
RCB4_CMD_ACK = _pykondo.RCB4_CMD_ACK

_pykondo.RCB4_CMD_MOV_swigconstant(_pykondo)
RCB4_CMD_MOV = _pykondo.RCB4_CMD_MOV

_pykondo.RCB4_CMD_CALL_swigconstant(_pykondo)
RCB4_CMD_CALL = _pykondo.RCB4_CMD_CALL

_pykondo.RCB4_CMD_VERS_swigconstant(_pykondo)
RCB4_CMD_VERS = _pykondo.RCB4_CMD_VERS

_pykondo.RCB4_CMD_ICS_swigconstant(_pykondo)
RCB4_CMD_ICS = _pykondo.RCB4_CMD_ICS

_pykondo.RCB4_DEV_RAM_swigconstant(_pykondo)
RCB4_DEV_RAM = _pykondo.RCB4_DEV_RAM

_pykondo.RCB4_DEV_DEV_swigconstant(_pykondo)
RCB4_DEV_DEV = _pykondo.RCB4_DEV_DEV

_pykondo.RCB4_DEV_COM_swigconstant(_pykondo)
RCB4_DEV_COM = _pykondo.RCB4_DEV_COM

_pykondo.RCB4_DEV_ROM_swigconstant(_pykondo)
RCB4_DEV_ROM = _pykondo.RCB4_DEV_ROM

_pykondo.RCB4_RAM_TO_COM_swigconstant(_pykondo)
RCB4_RAM_TO_COM = _pykondo.RCB4_RAM_TO_COM

_pykondo.RCB4_COM_TO_RAM_swigconstant(_pykondo)
RCB4_COM_TO_RAM = _pykondo.RCB4_COM_TO_RAM

_pykondo.RCB4_OPT_BYTES_swigconstant(_pykondo)
RCB4_OPT_BYTES = _pykondo.RCB4_OPT_BYTES

_pykondo.RCB4_OPT_SIO_swigconstant(_pykondo)
RCB4_OPT_SIO = _pykondo.RCB4_OPT_SIO

_pykondo.RCB4_OPT_EEPROM_swigconstant(_pykondo)
RCB4_OPT_EEPROM = _pykondo.RCB4_OPT_EEPROM

_pykondo.RCB4_OPT_RESP_swigconstant(_pykondo)
RCB4_OPT_RESP = _pykondo.RCB4_OPT_RESP

_pykondo.RCB4_OPT_VEC_swigconstant(_pykondo)
RCB4_OPT_VEC = _pykondo.RCB4_OPT_VEC

_pykondo.RCB4_OPT_FRAME_10MS_swigconstant(_pykondo)
RCB4_OPT_FRAME_10MS = _pykondo.RCB4_OPT_FRAME_10MS

_pykondo.RCB4_OPT_FRAME_20MS_swigconstant(_pykondo)
RCB4_OPT_FRAME_20MS = _pykondo.RCB4_OPT_FRAME_20MS

_pykondo.RCB4_OPT_FRAME_15MS_swigconstant(_pykondo)
RCB4_OPT_FRAME_15MS = _pykondo.RCB4_OPT_FRAME_15MS

_pykondo.RCB4_OPT_FRAME_25MS_swigconstant(_pykondo)
RCB4_OPT_FRAME_25MS = _pykondo.RCB4_OPT_FRAME_25MS

_pykondo.RCB4_OPT_COM_BAUD_125200_swigconstant(_pykondo)
RCB4_OPT_COM_BAUD_125200 = _pykondo.RCB4_OPT_COM_BAUD_125200

_pykondo.RCB4_OPT_COM_BAUD_625000_swigconstant(_pykondo)
RCB4_OPT_COM_BAUD_625000 = _pykondo.RCB4_OPT_COM_BAUD_625000

_pykondo.RCB4_OPT_COM_BAUD_1250000_swigconstant(_pykondo)
RCB4_OPT_COM_BAUD_1250000 = _pykondo.RCB4_OPT_COM_BAUD_1250000

_pykondo.RCB4_OPT_ZERO_swigconstant(_pykondo)
RCB4_OPT_ZERO = _pykondo.RCB4_OPT_ZERO

_pykondo.RCB4_OPT_CARRY_swigconstant(_pykondo)
RCB4_OPT_CARRY = _pykondo.RCB4_OPT_CARRY

_pykondo.RCB4_OPT_ERROR_swigconstant(_pykondo)
RCB4_OPT_ERROR = _pykondo.RCB4_OPT_ERROR

_pykondo.RCB4_OPT_ICS_BAUD_125200_swigconstant(_pykondo)
RCB4_OPT_ICS_BAUD_125200 = _pykondo.RCB4_OPT_ICS_BAUD_125200

_pykondo.RCB4_OPT_ICS_BAUD_625000_swigconstant(_pykondo)
RCB4_OPT_ICS_BAUD_625000 = _pykondo.RCB4_OPT_ICS_BAUD_625000

_pykondo.RCB4_OPT_ICS_BAUD_1250000_swigconstant(_pykondo)
RCB4_OPT_ICS_BAUD_1250000 = _pykondo.RCB4_OPT_ICS_BAUD_1250000

_pykondo.RCB4_OPT_GREEN_LED_swigconstant(_pykondo)
RCB4_OPT_GREEN_LED = _pykondo.RCB4_OPT_GREEN_LED

_pykondo.RCB4_OPT_LOW_swigconstant(_pykondo)
RCB4_OPT_LOW = _pykondo.RCB4_OPT_LOW

_pykondo.RCB4_OPT_HIGH_swigconstant(_pykondo)
RCB4_OPT_HIGH = _pykondo.RCB4_OPT_HIGH

_pykondo.RCB4_ADDR_OPT_swigconstant(_pykondo)
RCB4_ADDR_OPT = _pykondo.RCB4_ADDR_OPT

_pykondo.RCB4_ADDR_PGC_swigconstant(_pykondo)
RCB4_ADDR_PGC = _pykondo.RCB4_ADDR_PGC

_pykondo.RCB4_ADDR_EEPROM_FLAG_swigconstant(_pykondo)
RCB4_ADDR_EEPROM_FLAG = _pykondo.RCB4_ADDR_EEPROM_FLAG

_pykondo.RCB4_ADDR_AD_REF_BASE_swigconstant(_pykondo)
RCB4_ADDR_AD_REF_BASE = _pykondo.RCB4_ADDR_AD_REF_BASE

_pykondo.RCB4_ADDR_AD_READ_BASE_swigconstant(_pykondo)
RCB4_ADDR_AD_READ_BASE = _pykondo.RCB4_ADDR_AD_READ_BASE

_pykondo.RCB4_NUM_ANALOGS_swigconstant(_pykondo)
RCB4_NUM_ANALOGS = _pykondo.RCB4_NUM_ANALOGS

_pykondo.RCB4_ADDR_PIO_SET_swigconstant(_pykondo)
RCB4_ADDR_PIO_SET = _pykondo.RCB4_ADDR_PIO_SET

_pykondo.RCB4_ADDR_PIO_OUTPUT_swigconstant(_pykondo)
RCB4_ADDR_PIO_OUTPUT = _pykondo.RCB4_ADDR_PIO_OUTPUT

_pykondo.RCB4_ADDR_TIMER_0_swigconstant(_pykondo)
RCB4_ADDR_TIMER_0 = _pykondo.RCB4_ADDR_TIMER_0

_pykondo.RCB4_ADDR_TIMER_1_swigconstant(_pykondo)
RCB4_ADDR_TIMER_1 = _pykondo.RCB4_ADDR_TIMER_1

_pykondo.RCB4_ADDR_TIMER_2_swigconstant(_pykondo)
RCB4_ADDR_TIMER_2 = _pykondo.RCB4_ADDR_TIMER_2

_pykondo.RCB4_ADDR_TIMER_3_swigconstant(_pykondo)
RCB4_ADDR_TIMER_3 = _pykondo.RCB4_ADDR_TIMER_3

_pykondo.RCB4_ADDR_ICS_BASE_swigconstant(_pykondo)
RCB4_ADDR_ICS_BASE = _pykondo.RCB4_ADDR_ICS_BASE

_pykondo.RCB4_NUM_ICS_swigconstant(_pykondo)
RCB4_NUM_ICS = _pykondo.RCB4_NUM_ICS

_pykondo.RCB4_ADDR_MAIN_swigconstant(_pykondo)
RCB4_ADDR_MAIN = _pykondo.RCB4_ADDR_MAIN

_pykondo.RCB4_ADDR_SERVO_swigconstant(_pykondo)
RCB4_ADDR_SERVO = _pykondo.RCB4_ADDR_SERVO

_pykondo.RCB4_SERVO_DATA_SIZE_swigconstant(_pykondo)
RCB4_SERVO_DATA_SIZE = _pykondo.RCB4_SERVO_DATA_SIZE

_pykondo.RCB4_NUM_SERVOS_swigconstant(_pykondo)
RCB4_NUM_SERVOS = _pykondo.RCB4_NUM_SERVOS

_pykondo.RCB4_ADDR_KRI_swigconstant(_pykondo)
RCB4_ADDR_KRI = _pykondo.RCB4_ADDR_KRI

_pykondo.RCB4_ADDR_BTN_L_swigconstant(_pykondo)
RCB4_ADDR_BTN_L = _pykondo.RCB4_ADDR_BTN_L

_pykondo.RCB4_ADDR_BTN_M_swigconstant(_pykondo)
RCB4_ADDR_BTN_M = _pykondo.RCB4_ADDR_BTN_M

_pykondo.RCB4_ADDR_BTN_H_swigconstant(_pykondo)
RCB4_ADDR_BTN_H = _pykondo.RCB4_ADDR_BTN_H

_pykondo.RCB4_ADDR_MOT_BASE_swigconstant(_pykondo)
RCB4_ADDR_MOT_BASE = _pykondo.RCB4_ADDR_MOT_BASE

_pykondo.RCB4_MOT_SIZE_swigconstant(_pykondo)
RCB4_MOT_SIZE = _pykondo.RCB4_MOT_SIZE

_pykondo.RCB4_MOT_MAX_swigconstant(_pykondo)
RCB4_MOT_MAX = _pykondo.RCB4_MOT_MAX

_pykondo.RCB4_SERVO_ID_OFFSET_swigconstant(_pykondo)
RCB4_SERVO_ID_OFFSET = _pykondo.RCB4_SERVO_ID_OFFSET

_pykondo.RCB4_SERVO_SETPOS_OFFSET_swigconstant(_pykondo)
RCB4_SERVO_SETPOS_OFFSET = _pykondo.RCB4_SERVO_SETPOS_OFFSET

_pykondo.RCB4_SERVO_POS_OFFSET_swigconstant(_pykondo)
RCB4_SERVO_POS_OFFSET = _pykondo.RCB4_SERVO_POS_OFFSET

_pykondo.RCB4_SERVO_TRIM_OFFSET_swigconstant(_pykondo)
RCB4_SERVO_TRIM_OFFSET = _pykondo.RCB4_SERVO_TRIM_OFFSET

_pykondo.RCB4_ADDR_COUNTER_BASE_swigconstant(_pykondo)
RCB4_ADDR_COUNTER_BASE = _pykondo.RCB4_ADDR_COUNTER_BASE

_pykondo.RCB4_NUM_COUNTERS_swigconstant(_pykondo)
RCB4_NUM_COUNTERS = _pykondo.RCB4_NUM_COUNTERS

_pykondo.RCB4_BTN_NP_swigconstant(_pykondo)
RCB4_BTN_NP = _pykondo.RCB4_BTN_NP

_pykondo.RCB4_BTN_LU_swigconstant(_pykondo)
RCB4_BTN_LU = _pykondo.RCB4_BTN_LU

_pykondo.RCB4_BTN_LD_swigconstant(_pykondo)
RCB4_BTN_LD = _pykondo.RCB4_BTN_LD

_pykondo.RCB4_BTN_LR_swigconstant(_pykondo)
RCB4_BTN_LR = _pykondo.RCB4_BTN_LR

_pykondo.RCB4_BTN_LL_swigconstant(_pykondo)
RCB4_BTN_LL = _pykondo.RCB4_BTN_LL

_pykondo.RCB4_BTN_RU_swigconstant(_pykondo)
RCB4_BTN_RU = _pykondo.RCB4_BTN_RU

_pykondo.RCB4_BTN_RD_swigconstant(_pykondo)
RCB4_BTN_RD = _pykondo.RCB4_BTN_RD

_pykondo.RCB4_BTN_RR_swigconstant(_pykondo)
RCB4_BTN_RR = _pykondo.RCB4_BTN_RR

_pykondo.RCB4_BTN_RL_swigconstant(_pykondo)
RCB4_BTN_RL = _pykondo.RCB4_BTN_RL

_pykondo.RCB4_BTN_S1_swigconstant(_pykondo)
RCB4_BTN_S1 = _pykondo.RCB4_BTN_S1

_pykondo.RCB4_BTN_S2_swigconstant(_pykondo)
RCB4_BTN_S2 = _pykondo.RCB4_BTN_S2

_pykondo.RCB4_BTN_S3_swigconstant(_pykondo)
RCB4_BTN_S3 = _pykondo.RCB4_BTN_S3

_pykondo.RCB4_BTN_S4_swigconstant(_pykondo)
RCB4_BTN_S4 = _pykondo.RCB4_BTN_S4
class KondoInstance(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KondoInstance, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KondoInstance, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ftdic"] = _pykondo.KondoInstance_ftdic_set
    __swig_getmethods__["ftdic"] = _pykondo.KondoInstance_ftdic_get
    if _newclass:
        ftdic = _swig_property(_pykondo.KondoInstance_ftdic_get, _pykondo.KondoInstance_ftdic_set)
    __swig_setmethods__["swap"] = _pykondo.KondoInstance_swap_set
    __swig_getmethods__["swap"] = _pykondo.KondoInstance_swap_get
    if _newclass:
        swap = _swig_property(_pykondo.KondoInstance_swap_get, _pykondo.KondoInstance_swap_set)
    __swig_setmethods__["error"] = _pykondo.KondoInstance_error_set
    __swig_getmethods__["error"] = _pykondo.KondoInstance_error_get
    if _newclass:
        error = _swig_property(_pykondo.KondoInstance_error_get, _pykondo.KondoInstance_error_set)
    __swig_setmethods__["opt"] = _pykondo.KondoInstance_opt_set
    __swig_getmethods__["opt"] = _pykondo.KondoInstance_opt_get
    if _newclass:
        opt = _swig_property(_pykondo.KondoInstance_opt_get, _pykondo.KondoInstance_opt_set)
    __swig_setmethods__["debug"] = _pykondo.KondoInstance_debug_set
    __swig_getmethods__["debug"] = _pykondo.KondoInstance_debug_get
    if _newclass:
        debug = _swig_property(_pykondo.KondoInstance_debug_get, _pykondo.KondoInstance_debug_set)

    def __init__(self):
        this = _pykondo.new_KondoInstance()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pykondo.delete_KondoInstance
    __del__ = lambda self: None
KondoInstance_swigregister = _pykondo.KondoInstance_swigregister
KondoInstance_swigregister(KondoInstance)


def kondo_init(ki):
    return _pykondo.kondo_init(ki)
kondo_init = _pykondo.kondo_init

def kondo_init_custom(ki, baud, vid, pid, interface):
    return _pykondo.kondo_init_custom(ki, baud, vid, pid, interface)
kondo_init_custom = _pykondo.kondo_init_custom

def kondo_close(ki):
    return _pykondo.kondo_close(ki)
kondo_close = _pykondo.kondo_close

def kondo_write(ki, n):
    return _pykondo.kondo_write(ki, n)
kondo_write = _pykondo.kondo_write

def kondo_read(ki, n):
    return _pykondo.kondo_read(ki, n)
kondo_read = _pykondo.kondo_read

def kondo_read_timeout(ki, n, timeout):
    return _pykondo.kondo_read_timeout(ki, n, timeout)
kondo_read_timeout = _pykondo.kondo_read_timeout

def kondo_purge(ki):
    return _pykondo.kondo_purge(ki)
kondo_purge = _pykondo.kondo_purge

def kondo_trx(ki, out_bytes, in_bytes):
    return _pykondo.kondo_trx(ki, out_bytes, in_bytes)
kondo_trx = _pykondo.kondo_trx

def kondo_ack(ki):
    return _pykondo.kondo_ack(ki)
kondo_ack = _pykondo.kondo_ack

def kondo_get_options(ki):
    return _pykondo.kondo_get_options(ki)
kondo_get_options = _pykondo.kondo_get_options

def kondo_play_motion(ki, num, max_wait):
    return _pykondo.kondo_play_motion(ki, num, max_wait)
kondo_play_motion = _pykondo.kondo_play_motion

def kondo_stop_motion(ki):
    return _pykondo.kondo_stop_motion(ki)
kondo_stop_motion = _pykondo.kondo_stop_motion

def kondo_krc3_buttons(ki, cc, a1, a2, a3, a4):
    return _pykondo.kondo_krc3_buttons(ki, cc, a1, a2, a3, a4)
kondo_krc3_buttons = _pykondo.kondo_krc3_buttons

def kondo_read_analog(ki, result, num):
    return _pykondo.kondo_read_analog(ki, result, num)
kondo_read_analog = _pykondo.kondo_read_analog

def kondo_set_pio_direction(ki, bitset):
    return _pykondo.kondo_set_pio_direction(ki, bitset)
kondo_set_pio_direction = _pykondo.kondo_set_pio_direction

def kondo_get_pio_direction(ki, bitset):
    return _pykondo.kondo_get_pio_direction(ki, bitset)
kondo_get_pio_direction = _pykondo.kondo_get_pio_direction

def kondo_read_pio(ki, result):
    return _pykondo.kondo_read_pio(ki, result)
kondo_read_pio = _pykondo.kondo_read_pio

def kondo_write_pio(ki, bitset):
    return _pykondo.kondo_write_pio(ki, bitset)
kondo_write_pio = _pykondo.kondo_write_pio

def kondo_set_counter(ki, num, val):
    return _pykondo.kondo_set_counter(ki, num, val)
kondo_set_counter = _pykondo.kondo_set_counter

def kondo_get_counter(ki, result, num):
    return _pykondo.kondo_get_counter(ki, result, num)
kondo_get_counter = _pykondo.kondo_get_counter

def kondo_send_ics_pos(ki, servos, frame):
    return _pykondo.kondo_send_ics_pos(ki, servos, frame)
kondo_send_ics_pos = _pykondo.kondo_send_ics_pos

def kondo_get_servo_data(ki, servo_idx, offset):
    return _pykondo.kondo_get_servo_data(ki, servo_idx, offset)
kondo_get_servo_data = _pykondo.kondo_get_servo_data

def kondo_get_servo_trim(ki, servo_idx):
    return _pykondo.kondo_get_servo_trim(ki, servo_idx)
kondo_get_servo_trim = _pykondo.kondo_get_servo_trim

def kondo_get_servo_setpos(ki, servo_idx):
    return _pykondo.kondo_get_servo_setpos(ki, servo_idx)
kondo_get_servo_setpos = _pykondo.kondo_get_servo_setpos

def kondo_get_servo_pos(ki, servo_idx):
    return _pykondo.kondo_get_servo_pos(ki, servo_idx)
kondo_get_servo_pos = _pykondo.kondo_get_servo_pos

def kondo_get_servo_id(ki, servo_idx):
    return _pykondo.kondo_get_servo_id(ki, servo_idx)
kondo_get_servo_id = _pykondo.kondo_get_servo_id

def kondo_checksum(ki, n):
    return _pykondo.kondo_checksum(ki, n)
kondo_checksum = _pykondo.kondo_checksum

def kondo_verify_checksum(ki, n):
    return _pykondo.kondo_verify_checksum(ki, n)
kondo_verify_checksum = _pykondo.kondo_verify_checksum

def kondo_load_asciihex(ki, hex):
    return _pykondo.kondo_load_asciihex(ki, hex)
kondo_load_asciihex = _pykondo.kondo_load_asciihex

_pykondo.ICS_BAUD_swigconstant(_pykondo)
ICS_BAUD = _pykondo.ICS_BAUD

_pykondo.ICS_USB_VID_swigconstant(_pykondo)
ICS_USB_VID = _pykondo.ICS_USB_VID

_pykondo.ICS_USB_PID_swigconstant(_pykondo)
ICS_USB_PID = _pykondo.ICS_USB_PID

_pykondo.ICS_RX_TIMEOUT_swigconstant(_pykondo)
ICS_RX_TIMEOUT = _pykondo.ICS_RX_TIMEOUT

_pykondo.ICS_POS_TIMEOUT_swigconstant(_pykondo)
ICS_POS_TIMEOUT = _pykondo.ICS_POS_TIMEOUT

_pykondo.ICS_GET_TIMEOUT_swigconstant(_pykondo)
ICS_GET_TIMEOUT = _pykondo.ICS_GET_TIMEOUT

_pykondo.ICS_SET_TIMEOUT_swigconstant(_pykondo)
ICS_SET_TIMEOUT = _pykondo.ICS_SET_TIMEOUT

_pykondo.ICS_ID_TIMEOUT_swigconstant(_pykondo)
ICS_ID_TIMEOUT = _pykondo.ICS_ID_TIMEOUT

_pykondo.ICS_CMD_POS_swigconstant(_pykondo)
ICS_CMD_POS = _pykondo.ICS_CMD_POS

_pykondo.ICS_CMD_GET_swigconstant(_pykondo)
ICS_CMD_GET = _pykondo.ICS_CMD_GET

_pykondo.ICS_CMD_SET_swigconstant(_pykondo)
ICS_CMD_SET = _pykondo.ICS_CMD_SET

_pykondo.ICS_CMD_ID_swigconstant(_pykondo)
ICS_CMD_ID = _pykondo.ICS_CMD_ID

_pykondo.ICS_SC_EEPROM_swigconstant(_pykondo)
ICS_SC_EEPROM = _pykondo.ICS_SC_EEPROM

_pykondo.ICS_SC_STRETCH_swigconstant(_pykondo)
ICS_SC_STRETCH = _pykondo.ICS_SC_STRETCH

_pykondo.ICS_SC_SPEED_swigconstant(_pykondo)
ICS_SC_SPEED = _pykondo.ICS_SC_SPEED

_pykondo.ICS_SC_CURRENT_swigconstant(_pykondo)
ICS_SC_CURRENT = _pykondo.ICS_SC_CURRENT

_pykondo.ICS_SC_READ_swigconstant(_pykondo)
ICS_SC_READ = _pykondo.ICS_SC_READ

_pykondo.ICS_SC_WRITE_swigconstant(_pykondo)
ICS_SC_WRITE = _pykondo.ICS_SC_WRITE
class ICSData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ICSData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ICSData, name)
    __repr__ = _swig_repr
    __swig_setmethods__["ftdic"] = _pykondo.ICSData_ftdic_set
    __swig_getmethods__["ftdic"] = _pykondo.ICSData_ftdic_get
    if _newclass:
        ftdic = _swig_property(_pykondo.ICSData_ftdic_get, _pykondo.ICSData_ftdic_set)
    __swig_setmethods__["swap"] = _pykondo.ICSData_swap_set
    __swig_getmethods__["swap"] = _pykondo.ICSData_swap_get
    if _newclass:
        swap = _swig_property(_pykondo.ICSData_swap_get, _pykondo.ICSData_swap_set)
    __swig_setmethods__["error"] = _pykondo.ICSData_error_set
    __swig_getmethods__["error"] = _pykondo.ICSData_error_get
    if _newclass:
        error = _swig_property(_pykondo.ICSData_error_get, _pykondo.ICSData_error_set)
    __swig_setmethods__["debug"] = _pykondo.ICSData_debug_set
    __swig_getmethods__["debug"] = _pykondo.ICSData_debug_get
    if _newclass:
        debug = _swig_property(_pykondo.ICSData_debug_get, _pykondo.ICSData_debug_set)

    def __init__(self):
        this = _pykondo.new_ICSData()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _pykondo.delete_ICSData
    __del__ = lambda self: None
ICSData_swigregister = _pykondo.ICSData_swigregister
ICSData_swigregister(ICSData)


def ics_init(r):
    return _pykondo.ics_init(r)
ics_init = _pykondo.ics_init

def ics_close(r):
    return _pykondo.ics_close(r)
ics_close = _pykondo.ics_close

def ics_write(r, n):
    return _pykondo.ics_write(r, n)
ics_write = _pykondo.ics_write

def ics_read(r, n):
    return _pykondo.ics_read(r, n)
ics_read = _pykondo.ics_read

def ics_read_timeout(r, n, timeout):
    return _pykondo.ics_read_timeout(r, n, timeout)
ics_read_timeout = _pykondo.ics_read_timeout

def ics_purge(r):
    return _pykondo.ics_purge(r)
ics_purge = _pykondo.ics_purge

def ics_trx(r, bytes_out, bytes_in):
    return _pykondo.ics_trx(r, bytes_out, bytes_in)
ics_trx = _pykondo.ics_trx

def ics_trx_timeout(r, bytes_out, bytes_in, timeout):
    return _pykondo.ics_trx_timeout(r, bytes_out, bytes_in, timeout)
ics_trx_timeout = _pykondo.ics_trx_timeout

def ics_pos(r, id, pos):
    return _pykondo.ics_pos(r, id, pos)
ics_pos = _pykondo.ics_pos

def ics_hold(r, id):
    return _pykondo.ics_hold(r, id)
ics_hold = _pykondo.ics_hold

def ics_free(r, id):
    return _pykondo.ics_free(r, id)
ics_free = _pykondo.ics_free

def ics_get_stretch(r, id):
    return _pykondo.ics_get_stretch(r, id)
ics_get_stretch = _pykondo.ics_get_stretch

def ics_get_speed(r, id):
    return _pykondo.ics_get_speed(r, id)
ics_get_speed = _pykondo.ics_get_speed

def ics_get_current(r, id):
    return _pykondo.ics_get_current(r, id)
ics_get_current = _pykondo.ics_get_current

def ics_set_stretch(r, id, stretch):
    return _pykondo.ics_set_stretch(r, id, stretch)
ics_set_stretch = _pykondo.ics_set_stretch

def ics_set_speed(r, id, speed):
    return _pykondo.ics_set_speed(r, id, speed)
ics_set_speed = _pykondo.ics_set_speed

def ics_set_current_limit(r, id, curlim):
    return _pykondo.ics_set_current_limit(r, id, curlim)
ics_set_current_limit = _pykondo.ics_set_current_limit

def ics_get_id(r):
    return _pykondo.ics_get_id(r)
ics_get_id = _pykondo.ics_get_id

def ics_set_id(r, id):
    return _pykondo.ics_set_id(r, id)
ics_set_id = _pykondo.ics_set_id
# This file is compatible with both classic and new-style classes.


